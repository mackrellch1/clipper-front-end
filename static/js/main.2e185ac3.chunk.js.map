{"version":3,"sources":["logo.svg","TopLikes.jsx","App.js","reportWebVitals.js","index.js"],"names":["TopLikes","useState","data","setData","page","setPage","pageNumber","fetchTop","a","fetch","method","headers","then","r","json","response","console","log","length","useEffect","style","margin","map","item","index","class","likes","moment","date","fromNow","userName","onClick","id","Audio","_id","play","justifyContent","display","flexDirection","opacity","process","url","App","personTalking","setPersonTalking","lastPlayed","setLastPlayed","didLike","setDidLike","getSound","audio","onended","likeSound","className","padding","backgroundColor","borderRadius","alignItems","color","size","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAAe,I,mDC2FAA,MAjFf,WAAqB,IAAD,EACQC,mBAAS,IADjB,mBACTC,EADS,KACHC,EADG,OAEQF,mBAAS,GAFjB,mBAETG,EAFS,KAEHC,EAFG,KAIZC,EAAaF,EAAO,EAElBG,EAAQ,uCAAG,4BAAAC,EAAA,sEAEIC,MAAM,GAAD,OAV7B,oDAU6B,qBAAoBL,GAAQ,CACvDM,OAAQ,MACRC,QAAS,CACR,eAAe,sBAEdC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UAPI,OAEbC,EAFa,OAQbC,QAAQC,IAAIF,GACPA,EAASG,QACVb,EAAQD,EAAO,GAEzBD,EAAQY,GAZW,2CAAH,qDAmBd,OAHAI,oBAAUZ,EAAU,IACpBY,oBAAUZ,EAAU,CAACH,IAGjB,sBAAKgB,MAAO,CACRC,OAAQ,IADZ,UAGI,2DAC4Bf,KAE5B,gCACKJ,EAAKoB,KAAI,SAACC,EAAMC,GAAP,OACN,gCACA,qBAAIC,MAAM,OAAV,UACI,6BAAKF,EAAKG,MAAQ,EAAb,UAAoBH,EAAKG,MAAzB,oBAA4CH,EAAKG,MAAjD,WACL,6BAAKC,IAAOJ,EAAKK,MAAMC,YACvB,6BAAKN,EAAKO,WACV,oBAAIL,MAAM,WACNM,QAAS,WACL,IAtCPC,EAsCqB,IAAIC,OAtCzBD,EAsC2CT,EAAKW,IAtCjD,+DAAgEF,EAAhE,UAuCcG,QAHd,0BAJkBZ,EAAKW,YAanC,sBAAKd,MAAO,CACRgB,eAAgB,SAChBC,QAAS,OACTC,cAAe,OAHnB,UAMI,qBAAKb,MAAM,sBACPM,QAAS,WACL1B,EAAQD,GAAQ,EAAIA,EAAQA,EAAO,IAEvCgB,MAAO,CACCmB,QAASnC,GAAQ,EAAI,GAAM,EAC3BiB,OAAQ,IANpB,SASI,cAAC,IAAD,MAEJ,qBAAKI,MAAM,sBACPM,QAAS,WACL1B,EAAQD,EAAO,IAEnBgB,MAAO,CACCC,OAAQ,IALpB,SAQI,cAAC,IAAD,aC7EpBL,QAAQC,IAAIuB,cAEZ,IAAMC,EAEL,oDAEDzB,QAAQC,IAAIwB,GAyFGC,MAvFf,WAAgB,IAAD,EAE4BzC,mBAAS,MAFrC,mBAEP0C,EAFO,KAEQC,EAFR,OAGsB3C,mBAAS,MAH/B,mBAGP4C,EAHO,KAGKC,EAHL,OAIgB7C,oBAAS,GAJzB,mBAIP8C,EAJO,KAIEC,EAJF,KAORC,EAAQ,uCAAG,kCAAAzC,EAAA,sEAESC,MAAM,GAAD,OAAIgC,EAAJ,WAAkB,CAC/C/B,OAAQ,MACRC,QAAS,CACR,eAAe,sBAEdC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UAPC,mCAETC,EAFS,KAQhB6B,EAAiB7B,EAASe,WACpBoB,EAAQ,IAAIjB,OAVED,EAUgBjB,EAASmB,IAV1B,+DAAgEF,EAAhE,WAWbG,OACNa,GAAW,GACXE,EAAMC,QAAU,WACfP,EAAiB,MACjBE,EAAc/B,IAEfC,QAAQC,IAAIF,GAhBI,kCADG,IAACiB,IACJ,OAAH,qDAkBRoB,EAAS,uCAAG,4BAAA5C,EAAA,sEACMC,MAAM,GAAD,OAAIgC,EAAJ,iBAAgBI,EAAWX,KAAO,CAC7DxB,OAAQ,MACRC,QAAS,CACR,eAAe,sBAJA,OACXI,EADW,OAOjBC,QAAQC,IAAIF,GACZiC,GAAW,GARM,2CAAH,qDAWf,OACC,qBAAKK,UAAU,MAAf,SACA,yBAAQA,UAAU,aAAlB,UAEC,4BACEV,GACA,8CACYA,OAId,sBACCU,UAAU,WACVtB,QAASkB,EAFV,+BAMCJ,GACA,gCACC,sBAAKzB,MAAO,CACXkC,QAAQ,IADT,UAGEP,GAAWF,EAAWnB,OAAS,GAAK,EAAImB,EAAWnB,OAAS,EAH9D,aAKEqB,GACD,qBACChB,QAASqB,EACThC,MAAO,CACNmC,gBAAiB,QACjBlC,OAAQ,GACRiC,QAAS,EACTE,aAAc,EACdC,WAAY,SACZrB,eAAgB,UARlB,SAWC,cAAC,IAAD,CACCsB,MAAO,QACPC,KAAM,UAMX,cAAC,EAAD,CAAUlC,MAAM,mBClFJmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlD,MAAK,YAAkD,IAA/CmD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.2e185ac3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, useEffect } from 'react'\nimport moment from 'moment'\nimport './App.css';\nimport { ChevronRight, ChevronLeft } from 'react-feather'\n\n\nconst url = process.env.NODE_ENV == 'development' ? \n\t\"http://localhost:2002\" : \n\t\"https://discord-clips-api-5vhmvf6quq-uk.a.run.app\"\n\nfunction TopLikes() {\n    const [data, setData] = useState([])\n    const [page, setPage] = useState(0)\n    const getSoundUrl = (id) => `https://storage.googleapis.com/amplify-discord-clips/${id}.ogg`\n    let pageNumber = page + 1\n\n    const fetchTop = async () => {\n\t\t\n\t\tconst response = await fetch(`${url}/toplikes/${page}`, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: {\n\t\t\t\t'Content-Type':'application/json'\n\t\t\t},\n\t\t}).then(r => r.json());\n        console.log(response);\n        if (!response.length) {\n            setPage(page - 1)\n        }\n\t\tsetData(response)\n\t\t\n\t}\n\n    useEffect(fetchTop, [])\n    useEffect(fetchTop, [page])\n\n    return (\n        <div style={{\n            margin: 50\n        }}>\n            <span>\n                MOST LIKED SOUNDS PAGE {pageNumber}\n            </span>\n            <table>\n                {data.map((item, index) => (\n                    <tbody>\n                    <tr class=\"rows\" key={item._id}>\n                        <td>{item.likes > 1 ? `${item.likes} likes` : `${item.likes} like`}</td>\n                        <td>{moment(item.date).fromNow()}</td>\n                        <td>{item.userName}</td>\n                        <td class=\"App-link\"\n                            onClick={() => {\n                                const audio = new Audio(getSoundUrl(item._id));\n                                audio.play();\n                            }}>Play Sound</td>\n                    </tr>\n                    </tbody>\n                ))}\n            </table>\n            <div style={{\n                justifyContent: 'center',\n                display: 'flex',\n                flexDirection: 'row'\n\n            }}>\n                <div class=\"Chevron Page-Button\"\n                    onClick={() => {\n                        setPage(page <= 0 ? page : (page - 1))\n                    }}\n                    style={{\n                            opacity: page <= 0 ? 0.1 : 1,\n                            margin: 30\n                    }}\n                >\n                    <ChevronLeft />\n                </div>\n                <div class=\"Chevron Page-Button\"\n                    onClick={() => {\n                        setPage(page + 1)\n                    }}\n                    style={{\n                            margin: 30,\n                    }}\n                >\n                    <ChevronRight />\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\nexport default TopLikes;","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { ThumbsUp } from 'react-feather'\nimport TopLikes from './TopLikes';\n\nconsole.log(process.env.NODE_ENV)\n\nconst url = process.env.NODE_ENV == 'development' ? \n\t\"http://localhost:2002\" : \n\t\"https://discord-clips-api-5vhmvf6quq-uk.a.run.app\"\n\nconsole.log(url)\n\nfunction App() {\n\t\n\tconst [personTalking, setPersonTalking] = useState(null);\n\tconst [lastPlayed, setLastPlayed] = useState(null);\n\tconst [didLike, setDidLike] = useState(false)\n\n\tconst getSoundUrl = (id) => `https://storage.googleapis.com/amplify-discord-clips/${id}.ogg`\n\tconst getSound = async () => {\n\t\t\n\t\tconst [response] = await fetch(`${url}/random`, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: {\n\t\t\t\t'Content-Type':'application/json'\n\t\t\t},\n\t\t}).then(r => r.json());\n\t\tsetPersonTalking(response.userName);\n\t\tconst audio = new Audio(getSoundUrl(response._id));\n\t\taudio.play();\n\t\tsetDidLike(false)\n\t\taudio.onended = () => {\n\t\t\tsetPersonTalking(null)\n\t\t\tsetLastPlayed(response)\n\t\t}\n\t\tconsole.log(response);\n\t}\n\tconst likeSound = async () => {\n\t\tconst response = await fetch(`${url}/like/${lastPlayed._id}`, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: {\n\t\t\t\t'Content-Type':'application/json'\n\t\t\t}\n\t\t});\n\t\tconsole.log(response)\n\t\tsetDidLike(true)\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t<header className=\"App-header\">\n\t\t\t\n\t\t\t<p>\n\t\t\t\t{personTalking && (\n\t\t\t\t\t<span>\n\t\t\t\t\t\tSpeaking: {personTalking}\n\t\t\t\t\t</span>\n\t\t\t\t)}\n\t\t\t</p>\n\t\t\t<span\n\t\t\t\tclassName=\"App-link\"\n\t\t\t\tonClick={getSound}\n\t\t\t>\n\t\t\t\tPlay Random Sound\n\t\t\t</span>\n\t\t\t{lastPlayed && (\n\t\t\t\t<div>\n\t\t\t\t\t<div style={{\n\t\t\t\t\t\tpadding:10\n\t\t\t\t\t}}>\n\t\t\t\t\t\t{didLike ? (lastPlayed.likes || 0) + 1 : lastPlayed.likes || 0} likes\n\t\t\t\t\t</div>\n\t\t\t\t\t{!didLike && (\n\t\t\t\t\t\t<div \n\t\t\t\t\t\t\tonClick={likeSound}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tbackgroundColor: 'white',\n\t\t\t\t\t\t\t\tmargin: 10,\n\t\t\t\t\t\t\t\tpadding: 5,\n\t\t\t\t\t\t\t\tborderRadius: 8,\n\t\t\t\t\t\t\t\talignItems: \"center\",\n\t\t\t\t\t\t\t\tjustifyContent: \"center\"\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<ThumbsUp \n\t\t\t\t\t\t\t\tcolor={\"black\"}\n\t\t\t\t\t\t\t\tsize={50}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t<TopLikes class=\"App-logo\" />\n\t\t</header>\n\t\t\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}